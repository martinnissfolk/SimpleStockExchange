// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleStockExchange.Domain.Data;

namespace SimpleStockExchange.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190318085946_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SimpleStockExchange.Domain.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a3329215-0deb-4db2-b817-a14ad5c80c95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a288299f-a3bc-47e4-a158-a713928e91b2",
                            Email = "null",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "BILL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHRgQZRQBmPT/fQ6GTWTmGAD1BgV39Go5K30FQCF2rpMBuZbaDqVGCiydU3SDLHDIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PJPGIXFAASFEALFPQB4ME4IJJUFNLBZW",
                            TwoFactorEnabled = false,
                            UserName = "bill"
                        },
                        new
                        {
                            Id = "1a79c5c6-894e-40b2-bc06-d3593ee134f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9b71971-a3d3-4213-85e5-4e0fa4caf9a3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "JOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEEBAo3F2z0LOFuujNFX0ycGoF6wXrr1X0wcWGhFQjeio8p13zksBB9k7dH15QwvPNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "YB27YKWP4TUJIFZ6BJZCOD3NTRDT2KKY",
                            TwoFactorEnabled = false,
                            UserName = "joe"
                        });
                });

            modelBuilder.Entity("SimpleStockExchange.Domain.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("OrderBookId");

                    b.Property<int>("OrderStatus");

                    b.Property<bool>("OrderType");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderBookId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2019, 3, 16, 9, 59, 45, 646, DateTimeKind.Local).AddTicks(8942),
                            OrderBookId = 1,
                            OrderStatus = 0,
                            OrderType = true,
                            Price = 8,
                            Quantity = 5,
                            UserId = "1a79c5c6-894e-40b2-bc06-d3593ee134f9"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2019, 3, 17, 9, 59, 45, 648, DateTimeKind.Local).AddTicks(4764),
                            OrderBookId = 1,
                            OrderStatus = 0,
                            OrderType = true,
                            Price = 10,
                            Quantity = 8,
                            UserId = "1a79c5c6-894e-40b2-bc06-d3593ee134f9"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2019, 3, 15, 9, 59, 45, 648, DateTimeKind.Local).AddTicks(4785),
                            OrderBookId = 1,
                            OrderStatus = 0,
                            OrderType = false,
                            Price = 12,
                            Quantity = 10,
                            UserId = "1a79c5c6-894e-40b2-bc06-d3593ee134f9"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2019, 3, 15, 9, 59, 45, 648, DateTimeKind.Local).AddTicks(4790),
                            OrderBookId = 1,
                            OrderStatus = 0,
                            OrderType = false,
                            Price = 15,
                            Quantity = 20,
                            UserId = "1a79c5c6-894e-40b2-bc06-d3593ee134f9"
                        });
                });

            modelBuilder.Entity("SimpleStockExchange.Domain.Data.OrderBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<int>("CurrentPrice");

                    b.Property<int>("Quantity");

                    b.Property<string>("TickerSymbol");

                    b.HasKey("Id");

                    b.ToTable("OrderBook");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Stock A",
                            CurrentPrice = 10,
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SimpleStockExchange.Domain.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SimpleStockExchange.Domain.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleStockExchange.Domain.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SimpleStockExchange.Domain.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimpleStockExchange.Domain.Data.Order", b =>
                {
                    b.HasOne("SimpleStockExchange.Domain.Data.OrderBook", "OrderBook")
                        .WithMany("Orders")
                        .HasForeignKey("OrderBookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimpleStockExchange.Domain.Data.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
